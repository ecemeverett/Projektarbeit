from playwright.async_api import async_playwright, TimeoutError as PlaywrightTimeoutError
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin, urlparse
from concurrent.futures import ThreadPoolExecutor, as_completed
import asyncio

def check_link(url):
    try:
        response = requests.get(url, timeout=1.5)  # Slightly lower timeout for even faster checks
        return response.status_code == 200
    except requests.RequestException:
        return False

def get_footer_links(url):
    try:
        response = requests.get(url, timeout=1.5)
        soup = BeautifulSoup(response.content, 'html.parser')
        footer = soup.find('footer')
        if footer:
            links = footer.find_all('a', href=True)
            return [urljoin(url, link['href']) for link in links]
    except requests.RequestException:
        pass
    return []

def get_internal_links(url):
    try:
        response = requests.get(url, timeout=1.5)
        soup = BeautifulSoup(response.content, 'html.parser')
        internal_links = set()
        for link in soup.find_all('a', href=True):
            absolute_link = urljoin(url, link['href'])
            if urlparse(absolute_link).netloc == urlparse(url).netloc:
                internal_links.add(absolute_link)
        return internal_links
    except requests.RequestException:
        return set()

async def check_cookie_banner_with_playwright(url, context):
    page = await context.new_page()
    try:
        await page.goto(url, timeout=12000)  # Slightly reduced timeout for loading
        cookie_settings_link = await page.query_selector("a[href='javascript:Optanon.ToggleInfoDisplay()']")
        if cookie_settings_link:
            await cookie_settings_link.click()
            await page.wait_for_timeout(1000)  # Shorter wait after clicking
            return await page.is_visible("body")
    except (PlaywrightTimeoutError, Exception):
        return False
    finally:
        await page.close()

def check_footer_links(url):
    footer_links = get_footer_links(url)
    results = []
    with ThreadPoolExecutor(max_workers=20) as executor:  # Increased max_workers for faster processing
        future_to_link = {executor.submit(check_link, link): link for link in footer_links}
        for future in as_completed(future_to_link):
            link = future_to_link[future]
            try:
                results.append((link, future.result()))
            except Exception:
                results.append((link, False))
    return results

async def check_footer_links_on_all_pages(url):
    internal_links = get_internal_links(url)
    internal_links.add(url)

    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        context = await browser.new_context()

        with ThreadPoolExecutor(max_workers=15) as executor:
            future_to_link = {
                executor.submit(check_footer_links, link): link for link in internal_links
            }
            for future in as_completed(future_to_link):
                link = future_to_link[future]
                try:
                    results = future.result()
                    for link_result, status in results:
                        if "Optanon.ToggleInfoDisplay()" in link_result:
                            cookie_settings_link_works = await check_cookie_banner_with_playwright(link, context)
                            print(f"Cookie-Einstellungen-Link auf {link} funktioniert: {cookie_settings_link_works}")
                        else:
                            print(f"Link funktioniert: {link_result}" if status else f"Link funktioniert nicht: {link_result}")
                except Exception as e:
                    print(f"Fehler beim Überprüfen der Links auf {link}: {e}")

        await browser.close()

if __name__ == "__main__":
    url_to_check = "https://www.loreal-paris.de"
    asyncio.run(check_footer_links_on_all_pages(url_to_check))
